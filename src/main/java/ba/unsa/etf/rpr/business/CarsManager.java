package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Cars;
import ba.unsa.etf.rpr.exceptions.CarsException;

import java.util.List;

/**
 * This is a Java class called "CarsManager" that provides a set of methods for managing Cars objects.
 * The class uses the DaoFactory to access the Cars DAO (Data Access Object) and perform CRUD (Create, Read, Update, Delete) operations on Cars objects.
 * It also throws a CarsException in case of an error.
 * @author Bakir Pljakic
 */
public class CarsManager {

    /**
     * Add cars.
     *Adds Cars object to table Cars.
     * @param f the f
     * @return the cars
     * @throws CarsException the cars exception
     */
    public Cars add(Cars f) throws CarsException {
        if (f.getId() != 0) throw new CarsException("Cars can not already have an ID. ID is autogenerated.");
        try {
            return DaoFactory.carsDao().add(f);
        } catch (CarsException e) {
            throw new CarsException(e.getMessage(), e);
        }
    }

    /**
     * Delete.
     *Deletes cars, from db table Cars, with a given id.
     * @param id the id
     * @throws CarsException the cars exception
     */
    public void delete(int id) throws CarsException {
        try {
            DaoFactory.carsDao().delete(id);
        } catch (CarsException e) {
            throw new CarsException(e.getMessage(), e);
        }
    }

    /**
     * Updates cars in db table Cars.
     *
     * @param cars the cars
     * @return the cars
     * @throws CarsException the cars exception
     */
    public Cars update(Cars cars) throws CarsException {
        return DaoFactory.carsDao().update(cars);
    }

    /**

     * Fetches all Cars objects from table Cars and stores it in a list.
     *
     * @return the all
     * @throws CarsException the cars exception
     */
    public List<Cars> getAll() throws CarsException {
        return DaoFactory.carsDao().getAll();
    }

    /**
     * Fetches all availbale Cars objects from table Cars and stores it in a list.
     *
     * @return the all available
     * @throws CarsException the cars exception
     */
    public List<Cars> getAllAvailable() throws CarsException {
        return DaoFactory.carsDao().getAllAvailable();
    }

    /**
     * Gets by id.

     * Fetches Cars object form table Cars defined by given id.
     * @param id the id
     * @return the by id
     * @throws CarsException the cars exception
     */
    public Cars getById(int id) throws CarsException {
        return DaoFactory.carsDao().getById(id);
    }

    /**
     * Gets id.
     * @param marka   the marka
     * @param model   the model
     * @param godiste the godiste
     * @param cijena  the cijena
     * @param b       the b
     * @return the id
     * @throws CarsException the cars exception
     */
    public Integer getID(String marka, String model, Integer godiste, Integer cijena, boolean b) throws CarsException {
        return DaoFactory.carsDao().getID(marka, model, godiste, cijena, b);
    }

}
